/**
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
 */

var http = require('http');
var url = require('url');
var fs = require('fs');
var adb = require('adbkit');
var Q = require('q');
var AgentKeepAlive = require('agentkeepalive');
var PushSession = require('./pushsession');

var httpAgent = new AgentKeepAlive({
    maxSockets: 5,
    maxFreeSockets: 5,
    keepAliveMsecs: 3000000
});

function doRequest(method, target, action, options) {
    var deferred = Q.defer();

    var client = adb.createClient();
    client.listDevices()
    .then(function(devices) {
        if (devices.length === 0) {
            console.error('No devices detected.');
        }

        // We use the first device.
        var device = devices[0];

        // Open a TCP connection to port 2424.
        client.openTcp(device.id, 2424)
        .then(function(socket) {
            // Override the function that creates a socket, instead using the existing socket.
            // This function is identical to the one found in agentkeepalive, except that it doesn't create a new socket.
            AgentKeepAlive.prototype.createSocket = function(req, options) {
                var self = this;
                socket._requestCount = 0;
                if (self.keepAliveMsecs) {
                    socket._maxKeepAliveTimeout = function () {
                        debug('maxKeepAliveTimeout, socket destroy()');
                        socket.destroy();
                        self.timeoutSocketCount++;
                    };
                    socket.setTimeout(self.keepAliveMsecs, socket._maxKeepAliveTimeout);
                    // Disable Nagle's algorithm: http://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/
                    socket.setNoDelay(true);
                }
                this.createSocketCount++;
                return socket;
            };
        }).then(function() {
            var targetParts = target.split(':');
            var host = targetParts[0];
            var port = +(targetParts[1] || 2424);
            options = options || {};

            var queryParams = {};
            if (options.query) {
                Object.keys(options.query).forEach(function(k) {
                    queryParams[k] = options.query[k];
                });
            }
            if (options.appId) {
                queryParams['appId'] = options.appId;
            }
            if (options.appType) {
                queryParams['appType'] = options.appType;
            }

            var uri = url.format({
                protocol: 'http',
                hostname: host,
                port: port,
                pathname: action,
                query: queryParams
            });
            var pathWithQuery = uri.replace(/^.*?\/\/.*?\//, '/');
            process.stdout.write(method + ' ' + uri);

            var headers = {
                'Connection': 'keep-alive'
            };
            var body = null;
            if (method == 'POST' || method == 'PUT') {
                body = options.body || '';
                if (options.json) {
                    body = JSON.stringify(options.json);
                    headers['Content-Type'] = 'application/json';
                }
                headers['Content-Length'] = body.length;
            }

            var startTime = new Date();
            var req = http.request({
                hostname: host,
                port: port,
                method: method,
                path: pathWithQuery,
                headers: headers,
                agent: httpAgent
            });

            var outStream = null;
            var innerDeferred = null;

            if (options.saveResponseToFile) {
                innerDeferred = Q.defer();
                deferred.promise.then(function() {
                    return innerDeferred.promise;
                }, function(e) {
                    if (outStream) {
                        outStream.close();
                    }
                    throw e;
                });
            }

            req.on('error', function(e) {
                deferred.reject(e);
            });
            // Disable timeouts for packapk until we can optimize it :(.
            req.on('socket', function(socket) {
                socket.setTimeout(0);
            });

            if (body) {
                req.write(body);
            }
            req.end();
            req.on('response', function(res) {
                process.stdout.write(' ==> ' + res.statusCode);
                var body = '';
                var lastDotTime = Date.now();
                if (options.saveResponseToFile) {
                    outStream = fs.createWriteStream(options.saveResponseToFile);
                    res.on('data', function() {
                        var now = Date.now();
                        if (now - lastDotTime > 1000) {
                            lastDotTime = now;
                            process.stdout.write('.');
                        }
                    });
                    res.pipe(outStream);
                    outStream.on('finish', function() {
                        outStream.close(innerDeferred.resolve);  // close() is async, call cb after close completes.
                    });
                } else {
                    res.setEncoding('utf8');
                    res.on('data', function(chunk) {
                        body += chunk;
                    });
                }
                res.on('end', function() {
                    process.stdout.write(' (' + (new Date() - startTime) + ')\n');
                    if (res.statusCode != 200) {
                        deferred.reject(new Error('Server returned status code: ' + res.statusCode + '\n\n' + body));
                        return;
                    }
                    if (!options.saveResponseToFile) {
                        try {
                            body = options.expectJson ? JSON.parse(body) : body;
                        } catch (e) {
                            deferred.reject(new Error('Invalid JSON: ' + body.slice(500)));
                            return;
                        }
                    }
                    deferred.resolve({res:res, body:body});
                });
            });
        });
    });

    return deferred.promise;
}

function HarnessClient(target) {
    this.target = target || '127.0.0.1';
}

HarnessClient.prototype.info = function() {
    return doRequest('GET', this.target, '/info', { expectJson: true });
};

HarnessClient.prototype.assetmanifest = function(/* optional */ appId) {
    return doRequest('GET', this.target, '/assetmanifest', {expectJson: true, appId: appId});
};

HarnessClient.prototype.menu = function() {
    return doRequest('POST', this.target, '/menu');
};

HarnessClient.prototype.quit = function() {
    return doRequest('POST', this.target, '/quit');
};

HarnessClient.prototype.evalJs = function(someJs) {
    return doRequest('POST', this.target, '/exec', { query: {code: someJs} });
};

HarnessClient.prototype.launch = function(/* optional */ appId) {
    return doRequest('POST', this.target, '/launch', { appId: appId});
};

HarnessClient.prototype.deleteAllApps = function() {
    return doRequest('POST', this.target, '/deleteapp', { query: {'all': 1} });
};

HarnessClient.prototype.deleteApp = function(/* optional */ appId) {
    return doRequest('POST', this.target, '/deleteapp', { appId: appId});
};

HarnessClient.prototype.pushZip = function(appId, appType, zipData, /* optional */ totalPushBytes, /* optional */ manifestEtag) {
    var query = {};
    if (totalPushBytes) {
        query['expectBytes'] = totalPushBytes;
    }
    if (manifestEtag) {
        query['manifestEtag'] = manifestEtag;
    }
    return doRequest('POST', this.target, '/zippush', {
        appId: appId,
        appType: appType,
        body: zipData,
        query: query
    });
};

HarnessClient.prototype.pushFile = function(appId, appType, payload, etag, remotePath, /* optional */ totalPushBytes, /* optional */ manifestEtag) {
    var query = {
        'path': remotePath,
        'etag': etag
    };
    if (totalPushBytes) {
        query['expectBytes'] = totalPushBytes;
    }
    if (manifestEtag) {
        query['manifestEtag'] = manifestEtag;
    }
    return doRequest('PUT', this.target, '/putfile', {
        appId: appId,
        appType: appType,
        body: payload,
        query: query
    });
};

HarnessClient.prototype.deleteFiles = function(appId, deleteList, /* optional */ manifestEtag) {
    var query = {};
    if (manifestEtag) {
        query['manifestEtag'] = manifestEtag;
    }
    return doRequest('POST', this.target, 'deletefiles', { appId: appId, json: {'paths': deleteList}, query: query});
};

HarnessClient.prototype.createPushSession = function(dir) {
    return new PushSession(this, dir);
};

module.exports = HarnessClient;

